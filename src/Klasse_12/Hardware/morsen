#include "mbed.h"
#include "platform/mbed_thread.h"
#include "LCD.h"

//Zustände
enum { WARTENAUFTASTE=0, TASTEGEDRUECKT=1, KURZ=2, LANG=3, WARTENAUFNAECHSTETASTE=4, ZEICHENFERTIG=5 };

#define zeit TIM7->CNT

DigitalOut ird1(PA_7);
DigitalIn taste(PA_1);
PortOut z(PortC,0xFF);
InterruptIn signal(PC_8);
lcd mylcd;

int aktZustand=WARTENAUFTASTE;
int code=0, laenge=0;

void tim6isr(void)
{
    TIM6->SR=0;
    HAL_NVIC_ClearPendingIRQ(TIM6_IRQn);

    ird1 = !ird1;

}

void starteZeit()
{
    zeit=0;
}

void gedrueckt() 	//ISR signal PC_8 fallende Flanke
{

    if(aktZustand == WARTENAUFTASTE){
        aktZustand = TASTEGEDRUECKT;
        starteZeit();
    } else if (aktZustand == WARTENAUFNAECHSTETASTE) {
        aktZustand = TASTEGEDRUECKT;
        starteZeit();
    }

}

void speichern(int wert)
{
    laenge++;
    code=(code<<1)+wert;
}

void losgelassen() 	//ISR signal PC_8 steigende Flanke
{

    if (aktZustand == TASTEGEDRUECKT) {
        if (zeit < 200) {
            aktZustand = KURZ;
            speichern(0);
        } else if (zeit >= 200) {
            aktZustand = LANG;
            speichern(1);
        }
    }

}

char dekodiere(char c, char dl)
{
  switch (dl)
  {
  case 1: if (c==0) return 'E';
             if (c==1) return 'T';
             break;
  case 2: switch (c)
          {
           case 0: return 'I'; 
           case 1: return 'A'; 
           case 2: return 'N'; 
           case 3: return 'M'; 
          };
          break;
  case 3: switch (c)
             {
             case 0: return 'S'; 
             case 1: return 'U'; 
             case 2: return 'R'; 
             case 3: return 'W'; 
             case 4: return 'D'; 
             case 5: return 'K'; 
             case 6: return 'G'; 
             case 7: return 'O'; 
             };
             break;
  case 4: switch(c)
          {
           case 0: return 'H';
           case 1: return 'V';
           case 2: return 'F';
           case 3: return 'u';
           case 4: return 'L';
           case 5: return 'a';
           case 6: return 'P';
           case 7: return 'J';
           case 8: return 'B';
           case 9: return 'X';
           case 10: return 'C';
           case 11: return 'Y';
           case 12: return 'Z';
           case 13: return 'Q';
           case 14: return 'o';
           case 15: return ' ';
          };
         break;
   default: return ' ';
  }
  return ' ';
}

void ausgeben() 	//lcd mylcd;   
//setzt code und laenge zurück
{
    mylcd.printf("%c",dekodiere(code,laenge));
    laenge=0;
    code=0;
}

void abgelaufen(void) 	//ISR TIM7 
{
    TIM7->SR=0;
    HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
    aktZustand = ZEICHENFERTIG;
    ausgeben();

}

/* Timer init function */
void init(void)
{
    //Eingänge
    taste.mode(PullDown);
    signal.fall(&gedrueckt);
    signal.rise(&losgelassen);

    //TIM6 init
    RCC->APB1ENR |= 0b10000;
    TIM6->PSC = 0;
    TIM6->ARR = 841;
    TIM6->CNT = 0;
    TIM6->DIER = 1;
    TIM6->SR = 0;
    TIM6->CR1 = 1;

    NVIC_SetVector(TIM6_IRQn, (uint32_t)&tim6isr);
    HAL_NVIC_EnableIRQ(TIM6_IRQn);


//TIM7 initialisieren
    RCC->APB1ENR|=0b100000;  //Clock Enable
    TIM7->PSC=31999;            	//Prescaler 1ms
    TIM7->ARR=1000;          	//Autoreload 
			//421*1/32e6 = 13,156µs
    TIM7->CNT=1000;
    TIM7->DIER=1;	 //UIE = 1 (Update Interrupt Enable)
    TIM7->SR=0;             	//UIF =0 (Update Interrupt Flag)
    TIM7->CR1=0;
 
   /* TIM7_IRQn interrupt configuration */
    NVIC_SetVector(TIM7_IRQn, (uint32_t)&abgelaufen);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
    
    //Display
    mylcd.clear();
    mylcd.cursorpos(0);   
}

int main()
{
    init();   

//Hier euer Code Aufgabe 3
    
    while (true) {
        if (taste==1) {
            TIM6->CR1=1;
        }else {
            TIM6->CR1=0;//CEN=1 (Counter Enable)
        }      
        z=signal;
        thread_sleep_for(20);	//entprellen
    }
}
